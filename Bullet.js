// Generated by CoffeeScript 1.4.0
(function() {

  window.Bullet = (function() {

    Bullet.prototype.STEP = 15;

    Bullet.prototype.WIDTH = 20;

    Bullet.prototype.HEIGHT = 20;

    function Bullet(person, blocks, canvasWidth, canvasHeight, ghosts) {
      this.person = person;
      this.blocks = blocks;
      this.canvasWidth = canvasWidth;
      this.canvasHeight = canvasHeight;
      this.ghosts = ghosts;
      this.width = this.WIDTH;
      this.height = this.HEIGHT;
      this.isAlive = true;
      this.initialize();
      this.person.bulletCount--;
    }

    Bullet.prototype.initialize = function() {
      if (this.person.dx > 0) {
        this.x = this.person.x + this.person.width;
        this.y = this.person.y + this.person.height / 2 - this.height / 2;
        this.dx = this.STEP;
        this.dy = 0;
        return;
      }
      if (this.person.dx < 0) {
        this.x = this.person.x - this.width;
        this.y = this.person.y + this.person.height / 2 - this.height / 2;
        this.dx = -this.STEP;
        this.dy = 0;
        return;
      }
      if (this.person.dy > 0) {
        this.x = this.person.x + this.person.width / 2 - this.width / 2;
        this.y = this.person.y + this.person.height;
        this.dx = 0;
        this.dy = this.STEP;
        return;
      }
      if (this.person.dy < 0) {
        this.x = this.person.x + this.person.width / 2 - this.width / 2;
        this.y = this.person.y - this.height;
        this.dx = 0;
        this.dy = -this.STEP;
      }
    };

    Bullet.prototype.turnLeft = function() {
      this.dx = -this.STEP;
      return this.dy = 0;
    };

    Bullet.prototype.turnRight = function() {
      this.dx = this.STEP;
      return this.dy = 0;
    };

    Bullet.prototype.turnUp = function() {
      this.dx = 0;
      return this.dy = -this.STEP;
    };

    Bullet.prototype.turnDown = function() {
      this.dx = 0;
      return this.dy = this.STEP;
    };

    Bullet.prototype.isLeft = function() {
      return this.dx < 0;
    };

    Bullet.prototype.isRight = function() {
      return this.dx > 0;
    };

    Bullet.prototype.isUp = function() {
      return this.dy < 0;
    };

    Bullet.prototype.isDown = function() {
      return this.dy > 0;
    };

    Bullet.prototype.move = function() {
      var block, ghost, _i, _j, _len, _len1, _ref, _ref1;
      this.destroyIfBumpedToEdge();
      _ref = this.blocks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        this.destroyIfBumpedToBlock(block);
      }
      _ref1 = this.ghosts;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        ghost = _ref1[_j];
        this.destroyIfBumpedToGhost(ghost);
      }
      this.x += this.dx;
      return this.y += this.dy;
    };

    Bullet.prototype.isNextXStepMoreThanEdge = function(edge) {
      return this.x + this.width + this.dx >= edge;
    };

    Bullet.prototype.isNextYStepMoreThanEdge = function(edge) {
      return this.y + this.height + this.dy >= edge;
    };

    Bullet.prototype.isNextXStepLessThanEdge = function(edge) {
      return this.x + this.dx <= edge;
    };

    Bullet.prototype.isNextYStepLessThanEdge = function(edge) {
      return this.y + this.dy <= edge;
    };

    Bullet.prototype.isPersonOnTheRightSide = function(edge) {
      return this.x >= edge;
    };

    Bullet.prototype.isPersonOnTheLeftSide = function(edge) {
      return this.x + this.width <= edge;
    };

    Bullet.prototype.isPersonHigher = function(edge) {
      return this.y + this.height <= edge;
    };

    Bullet.prototype.isPersonLower = function(edge) {
      return this.y >= edge;
    };

    Bullet.prototype.isPersonOnTheLineOfBlock = function(block) {
      return (this.y + this.height >= block.y && this.y + this.height <= block.y + block.height) || (this.y <= block.y + block.height && this.y >= block.y);
    };

    Bullet.prototype.isPersonOnTheRowOfBlock = function(block) {
      return (this.x + this.width >= block.x && this.x + this.width <= block.x + block.width) || (this.x <= block.x + block.width && this.x >= block.x);
    };

    Bullet.prototype.destroyIfBumpedToBlock = function(block) {
      if (this.isNextXStepMoreThanEdge(block.x) && this.isPersonOnTheLeftSide(block.x + block.width) && this.isPersonOnTheLineOfBlock(block) || this.isNextXStepLessThanEdge(block.x + block.width) && this.isPersonOnTheRightSide(block.x + block.width) && this.isPersonOnTheLineOfBlock(block) || this.isNextYStepMoreThanEdge(block.y) && this.isPersonHigher(block.y) && this.isPersonOnTheRowOfBlock(block) || this.isNextYStepLessThanEdge(block.y + block.height) && this.isPersonLower(block.y + block.height) && this.isPersonOnTheRowOfBlock(block)) {
        this.isAlive = false;
        return true;
      }
      return false;
    };

    Bullet.prototype.destroyIfBumpedToGhost = function(ghost) {
      var h0, h1, w0, w1, x0, x1, y0, y1;
      x0 = this.x;
      y0 = this.y;
      w0 = this.width;
      h0 = this.height;
      x1 = ghost.x;
      y1 = ghost.y;
      w1 = ghost.width;
      h1 = ghost.height;
      if (x0 < x1 && x0 + w0 > x1 && (y1 + h1 > y0 && y1 < y0 || y1 > y0 && y1 < y0 + h0) || x1 < x0 && x1 + w1 > x0 && (y1 < y0 && y1 + h1 > y0 || y1 > y0 && y1 < y0 + h0)) {
        if (this.isAlive) {
          ghost.isAlive = false;
        }
        this.isAlive = false;
        return true;
      }
      return false;
    };

    Bullet.prototype.destroyIfBumpedToEdge = function(person) {
      if (this.isNextXStepMoreThanEdge(this.canvasWidth) || this.isNextXStepLessThanEdge(0) || this.isNextYStepMoreThanEdge(this.canvasHeight) || this.isNextYStepLessThanEdge(0)) {
        this.isAlive = false;
        return true;
      }
      return false;
    };

    return Bullet;

  })();

}).call(this);
