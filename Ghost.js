// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Ghost = (function(_super) {

    __extends(Ghost, _super);

    function Ghost(x, y, blocks, canvasWidth, canvasHeight, line, lines) {
      this.x = x;
      this.y = y;
      this.blocks = blocks;
      this.canvasWidth = canvasWidth;
      this.canvasHeight = canvasHeight;
      this.line = line;
      this.lines = lines;
      this.STEP = 8;
      this.isAlive = true;
      Ghost.__super__.constructor.call(this, this.x, this.y, this.blocks, this.canvasWidth, this.canvasHeight);
      this.x -= this.WIDTH / 2;
      this.y -= this.HEIGHT / 2;
      this.setUpNewLine(this.line);
      this.picNumber = Math.ceil(Math.random() * 4);
    }

    Ghost.prototype.setUpNewLine = function(line) {
      this.dx = this.dy = 0;
      this.line = line;
      if (this.line.isVertical()) {
        this.x = line.getX0() - this.WIDTH / 2;
        if (Math.random() > 0.5) {
          return this.dy = -this.STEP;
        } else {
          return this.dy = this.STEP;
        }
      } else {
        this.y = line.getY0() - this.HEIGHT / 2;
        if (Math.random() > 0.5) {
          return this.dx = -this.STEP;
        } else {
          return this.dx = this.STEP;
        }
      }
    };

    Ghost.prototype.move = function() {
      var anotherLine;
      anotherLine = this.getAnotherLine(this.line);
      if (anotherLine) {
        if (Math.random() > 0.5) {
          this.setUpNewLine(anotherLine);
        }
      }
      if (this.line.isVertical()) {
        if (this.y + this.dy + this.HEIGHT / 2 >= this.line.getY1() || this.y + this.dy + this.HEIGHT / 2 <= this.line.getY0()) {
          anotherLine = this.getAnotherLine(this.line);
          if (anotherLine) {
            this.setUpNewLine(anotherLine);
          } else {
            this.dy = -this.dy;
          }
        }
      } else {
        if (this.x + this.dx + this.WIDTH / 2 >= this.line.getX1() || this.x + this.dx + this.WIDTH / 2 <= this.line.getX0()) {
          anotherLine = this.getAnotherLine(this.line);
          if (anotherLine) {
            this.setUpNewLine(anotherLine);
          } else {
            this.dx = -this.dx;
          }
        }
      }
      this.x += this.dx;
      return this.y += this.dy;
    };

    Ghost.prototype.getAnotherLine = function(currentline) {
      var line, point, _i, _len, _ref;
      point = {
        x: this.x + this.WIDTH / 2 + this.dx,
        y: this.y + this.HEIGHT / 2 + this.dy
      };
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.isPointOnLine(point, this.STEP / 2) && currentline !== line) {
          return line;
        }
      }
      return null;
    };

    return Ghost;

  })(Person);

}).call(this);
